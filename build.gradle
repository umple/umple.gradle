apply plugin: 'groovy'
apply plugin: 'java'

apply plugin: 'idea'

// Unless overridden in the pluginBundle config DSL, the project version will
// be used as your plugin version when publishing
group 'cruise.umple'
version '0.2.0'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile files('libs/umple-latest.jar')

    compile group: 'com.google.guava', name: 'guava', version: '21.0'

    testCompile gradleTestKit()
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

// First, apply the publishing plugin
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.6"
        classpath 'de.undercouch:gradle-download-task:3.2.0'
        classpath "gradle.plugin.org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.3.2"       
    }
}

/* 
  The TestSets plugin simplifies integration testing. By using the plugin, we just need to 
  declare an integration test 'testSet' for an integrationTest task to be automatically generated for us. See 
  https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing-with-the-testsets-plugin/
*/
apply plugin: "org.unbroken-dome.test-sets"

apply plugin: 'de.undercouch.download'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'maven'
apply plugin: 'java-gradle-plugin'

task downloadUmpleJar(type: de.undercouch.gradle.tasks.download.Download) {
    onlyIfNewer true
    overwrite true
    src 'http://cruise.eecs.uottawa.ca/umpleonline/scripts/umple.jar'
    dest 'libs/umple-latest.jar'
}

test.dependsOn('downloadUmpleJar')

// Declare our integration test set
testSets {
    integrationTest
}

//  Ensure that the outputs of the integration task are never "up-to-date" so that
//  the integration test task runs fully every time we invoke it.
project.integrationTest {
    outputs.upToDateWhen { false }
}

/*
  Integration tests are run before the check task. Check is run as part of the build task, 
  making the check test depend on integrationTest ensures integration tests are part of the build task.
*/
//check.dependsOn integrationTest
// Run unit tests before integration tests
//integrationTest.mustRunAfter test

// Copy the umple jar into a location that the TestProject used in the integration tests can access
task copyUmpleJar(type: Copy) {
    File umpleJar = getJar("${project.projectDir}/libs/umple-latest.jar")
   
    from umpleJar
    into "${project.projectDir}/src/integrationTest/resources/TestProject/libs"
    
}

/*
  Copy the plugin jars into a location that the TestProject used in the integration tests can access.
  
  A Copy task learns where to read from and copy to during the configuration phase. This phase happens
  before the execution phase, which is when the plugin jars get generated. That means we can't point
  the copy task at a specific jar since the plugin jars don't exist at configuration time. Rather, we point 
  the copy task at the /build/libs folder, since after the jar task executes this is where the plugin jars are stored. 
  When the copy task executes before the integrationTest task and after the jar task it copies the newly-created jars in the
  /build/libs folder to the TestProject.
*/ 
task copyPluginJars(type: Copy) {     
    from "${project.projectDir}/build/libs"
    into  "${project.projectDir}/src/integrationTest/resources/TestProject/libs"
}

static getJar(final String pathToJar) {
    File jar = new File(pathToJar)
   
    if (!jar.isFile()) {
        throw new Exception("Unable to locate a jar at " + pathToJar)
    }
    
    return jar
}

copyPluginJars.dependsOn('jar')

copyUmpleJar.dependsOn('downloadUmpleJar')

integrationTest.dependsOn('copyUmpleJar', 'copyPluginJars')

integrationTest {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
}

test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
}

// The unit tests and integration test reports must be written to different directories
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('libs/'))
        }
    }
}

/*
  Apply other plugins here, e.g. java plugin for a plugin written in java or
  the groovy plugin for a plugin written in groovy
*/
repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy() //not needed for Java plugins
    compile files('./umple-latest.jar')
}

/*
  The configuration below shows the minimum properties
  required to publish the Umple plugin to the plugin portal
*/
pluginBundle {
    website = 'http://cruise.eecs.uottawa.ca/umple/'
    vcsUrl = 'https://github.com/umple/umple'
    description = 'Compile Umple files in Gradle. See the ReadMe at https://github.com/umple/umple.gradle for additional information.'
    tags = ['umple']

    plugins {
        umplePlugin {
            id = 'umple.gradle.plugin'
            displayName = 'Umple Plugin'
        }
    }
}

gradlePlugin {
    plugins {
        umplePlugin {
            id = "umple.gradle.plugin"
            implementationClass = "cruise.umple.UmpleGradlePlugin"
        }
    }
}

configurations {
    gradleRuntime
}

idea {
    module {
        scopes.RUNTIME.plus += [ configurations.gradleRuntime ]
    }
}

dependencies {
    gradleRuntime files("gradle/wrapper/gradle-wrapper.jar")
}