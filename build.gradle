apply plugin: 'groovy'

// Unless overridden in the pluginBundle config DSL, the project version will
// be used as your plugin version when publishing
group 'cruise.umple'
version '0.1.2'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile files('libs/umple-latest.jar')

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'com.google.guava', name: 'guava', version: '19.0'
}

// First, apply the publishing plugin
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.6"
        classpath 'de.undercouch:gradle-download-task:3.2.0'
        classpath "gradle.plugin.org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.3.2"
    }
}

/* 
  The TestSets plugin simplifies integration testing. By using the plugin, we just need to 
  declare an integration test 'testSet' for an integrationTest task to be automatically generated for us. See 
  https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing-with-the-testsets-plugin/
*/
apply plugin: "org.unbroken-dome.test-sets"

apply plugin: 'de.undercouch.download'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'maven'

task downloadUmpleJar(type: de.undercouch.gradle.tasks.download.Download) {
    onlyIfNewer true
    overwrite true
    src 'http://cruise.eecs.uottawa.ca/umpleonline/scripts/umple.jar'
    dest 'libs/umple-latest.jar'
}

test.dependsOn('downloadUmpleJar')

// Declare our integration test set
testSets {
    integrationTest
}

/*
  Ensure that the outputs of the integration task are never "up-to-date" so that 
  the integration test task runs fully every time we invoke it.
*/
project.integrationTest {
    outputs.upToDateWhen { false }
}

/*
  Integration tests are run before the check task. Check is run as part of the build task, 
  making the check test depend on integrationTest ensures integration tests are part of the build task.
*/
check.dependsOn integrationTest 
// Run unit tests before integration tests
integrationTest.mustRunAfter test

// Copy the umple jar into a location that the TestProject used in the integration tests can access
task copyUmpleJar(type: Copy) {
    final String jarFolderPath = "${project.projectDir}/libs"
    File jarFolder = new File(jarFolderPath)
    if (!jarFolder.isDirectory()) {
         throw new Exception("Unable to open " + jarFolderPath)
    }
    int numberCheckedFiles = 0
    final File[] jarFolderContents = jarFolder.listFiles() as File[]
    for (numberCheckedFiles; numberCheckedFiles < jarFolderContents.length; numberCheckedFiles++) {
        if (jarFolderContents[numberCheckedFiles].getName().equals("umple-latest.jar")) {
           break;
        }
    }
    if (numberCheckedFiles == jarFolderContents.length) {
        throw new Exception("Unable to locate a umple-latest.jar in " + jarFolderPath)
    }
    
    from jarFolderPath
    into "${project.projectDir}/src/integrationTest/resources/TestProject/libs"
}

integrationTest.dependsOn copyUmpleJar

// The unit tests and integration test reports must be written to different directories
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('libs/'))
        }
    }
}

/*
  Apply other plugins here, e.g. java plugin for a plugin written in java or
  the groovy plugin for a plugin written in groovy
*/
repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy() //not needed for Java plugins
    compile files('./umple-latest.jar')
}

/*
  The configuration below shows the minimum properties
  required to publish the Umple plugin to the plugin portal
*/
pluginBundle {
    website = 'http://cruise.eecs.uottawa.ca/umple/'
    vcsUrl = 'https://github.com/umple/umple'
    description = 'Compile Umple files in Gradle. See the ReadMe at https://github.com/umple/umple.gradle for additional information.'
    tags = ['umple']

    plugins {
        umplePlugin {
            id = 'umple.gradle.plugin'
            displayName = 'Umple Plugin'
        }
    }
}